import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.dokka' version '1.6.21'
}

def projectVersion = (System.getenv("VERSION") ?: '0.3.6-SNAPSHOT').replaceFirst("v", "").replace('/', '')

group 'xyz.theprogramsrc'
version projectVersion
description 'The best way to create a plugin'

repositories {
    mavenCentral()

    maven { url 'https://repo.theprogramsrc.xyz/repository/maven-public/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    maven { url 'https://oss.sonatype.org/content/groups/public/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.codemc.org/repository/maven-public/' }
    maven { url 'https://jitpack.io/' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'net.md-5:bungeecord-api:1.19-R0.1-SNAPSHOT'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.0'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'net.lingala.zip4j:zip4j:2.10.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

shadowJar {
    relocate 'com.google', 'xyz.theprogramsrc.simplecoreapi.libs.google'
    relocate 'org.apache.commons', 'xyz.theprogramsrc.simplecoreapi.libs.apache.commons'
    relocate 'org.checkerframework', 'xyz.theprogramsrc.simplecoreapi.libs.checkerframework'
    relocate 'org.intellij', 'xyz.theprogramsrc.simplecoreapi.libs.intellij'
    relocate 'org.jetbrains', 'xyz.theprogramsrc.simplecoreapi.libs.jetbrains'
    relocate 'javax.annotation', 'xyz.theprogramsrc.simplecoreapi.libs.annotation'
    relocate 'net.lingala.zip4j', 'xyz.theprogramsrc.simplecoreapi.libs.zip4j'

    mergeServiceFiles()
    exclude('**/*.kotlin_metadata')
    exclude('**/*.kotlin_builtins')

    archiveBaseName.set('SimpleCoreAPI')
    archiveClassifier.set('')
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
}

processResources {
    filter ReplaceTokens, tokens: [name: rootProject.name, version: project.version.toString(), description: project.description, git_short: System.getenv("GIT_COMMIT_SHORT_HASH") ?: "unknown", git_full: System.getenv("GIT_COMMIT_LONG_HASH") ?: "unknown"]
}

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Copy) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

configurations {
    testImplementation {
        extendsFrom(compileOnly)
    }
}

tasks.named("dokkaHtml") {
    outputDirectory.set(file(project.buildDir.absolutePath + '/dokka'))
}

publishing {
    repositories {
        if(System.getenv('env') == 'prod') {
            maven {
                name = 'TheProgramSrc'
                credentials.username = System.getenv('NEXUS_USERNAME')
                credentials.password = System.getenv('NEXUS_PASSWORD')
                url = uri(version.contains('-SNAPSHOT') ? 'https://repo.theprogramsrc.xyz/repository/maven-snapshots/' : 'https://repo.theprogramsrc.xyz/repository/maven-releases/')
            }
            maven {
                name = 'GitHubPackages'
                url = 'https://maven.pkg.github.com/TheProgramSrc/SimpleCoreAPI'
                credentials {
                    username = System.getenv('GITHUB_ACTOR')
                    password = System.getenv('GITHUB_TOKEN')
                }
            }
        } else {
            mavenLocal()
        }
    }

    publications {
        mavenKotlin(MavenPublication) { publication ->
            artifactId = 'simplecoreapi'

            from components.java

            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                asNode().remove(asNode().get('dependencies')[0])
            }
        }
    }
}

publish.dependsOn clean, test, jar, shadowJar